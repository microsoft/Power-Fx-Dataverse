<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="DV_resmimetype">text/microsoft-resx</resheader>
    <resheader name="DV_version">2.0</resheader>
    <resheader name="DV_reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="DV_writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="FormulaColumns_NotSupported" xml:space="preserve">
    <value>計算式列では使用できません。</value>
    
  </data>
  <data name="FormulaColumns_MathFunctionBadArity" xml:space="preserve">
    <value>{0} 関数の引数の数が無効です: 受取済み {1}、必要 {2}</value>
    
  </data>
  <data name="FormulaColumns_ArgNotSupported" xml:space="preserve">
    <value>計算式列に含まれる関数 {1} で引数 {0} を使用することはできません。</value>
    
  </data>
  <data name="FormulaColumns_ArgTypeNotSupported" xml:space="preserve">
    <value>計算式列では、この引数をこの型で渡すことはできせません。</value>
    
  </data>
  <data name="FormulaColumns_ArgumentTypeNotSupported" xml:space="preserve">
    <value>計算式列では、この引数を {0} 型で渡すことはできせません。</value>
    
  </data>
  <data name="FormulaColumns_LiteralArgRequired" xml:space="preserve">
    <value>この引数ではリテラル値のみを使用できます。</value>
    
  </data>
  <data name="FormulaColumns_TimeZoneConversion" xml:space="preserve">
    <value>この入力でタイム ゾーンを変換せずに {0} を実行することは、計算式列でサポートされていないため、可能ではありません。</value>
    
  </data>
  <data name="FormulaColumns_IncompatibleDateTimes" xml:space="preserve">
    <value>この操作を、日時の動作が同じでない値に対して実行することはできません。</value>
    
  </data>
  <data name="FormulaColumns_DateTimeFormatNotSupported" xml:space="preserve">
    <value>計算式列では、短い文字列形式の日時のみを使用できます。</value>
    
  </data>
  <data name="FormulaColumns_InvalidTimeUnit" xml:space="preserve">
    <value>{0} 引数の時間の単位は、{1} 日付計算関数で無効またはサポートされていません。</value>
    
  </data>
  <data name="FormulaColumns_NumericFormatNotSupported" xml:space="preserve">
    <value>計算式列はロケール固有の書式トークン ("." や "," など) をサポートしていません。</value>
    
  </data>
  <data name="FormulaColumns_FunctionNotSupported" xml:space="preserve">
    <value>計算式列は {0} をサポートしていません。代わりに {1} を使用します。</value>
    
  </data>
  <data name="FormulaColumns_OperationNotSupported" xml:space="preserve">
    <value>計算式列では、この操作を {0} 型で実行できません。</value>
    
  </data>
  <data name="FormulaColumns_ResultTypeNotSupported" xml:space="preserve">
    <value>結果の種類 {0} は、計算式列に対応していません。</value>
    
  </data>
  <data name="FormulaColumns_RecordAccessNotSupported" xml:space="preserve">
    <value>計算式列はレコード全体の直接参照に対応していません。レコードが含む有効なフィールドを参照してください。</value>
    
  </data>
  <data name="FormulaColumns_ResultTypeMustMatch" xml:space="preserve">
    <value>この計算式の結果タイプは {0} であるはずですが、実際の結果タイプは {1} です。計算式列の結果タイプは変更できません。</value>
    
  </data>
  <data name="FormulaColumns_ColumnTypeNotSupported" xml:space="preserve">
    <value>型が {0} である列は、計算式列に対応していません。</value>
    
  </data>
  <data name="FormulaColumns_ColumnFormatNotSupported" xml:space="preserve">
    <value>型が {0}、形式が {1} である列は、計算式列に対応していません。</value>
    
  </data>
  <data name="FormulaColumns_AggregateCoercionNotSupported" xml:space="preserve">
    <value>計算式列はレコードやテーブルの強制変換に対応していません。</value>
    
  </data>
  <data name="FormulaColumns_SingleColumnTableNotSupported" xml:space="preserve">
    <value>計算式列は単一列テーブルに対応していません。</value>
    
  </data>
  <data name="FormulaColumns_VirtualTableNotSupported" xml:space="preserve">
    <value>計算式列で仮想テーブル {0} を参照することはできません。</value>
    
  </data>
  <data name="FormulaColumns_TextNumberMissingFormat" xml:space="preserve">
    <value>テキスト関数に数値を使用する場合は、第 2 引数に書式設定を定義します。文字列の書式設定で、3 桁区切りや小数点を式の列に含めることはできません。</value>
    
  </data>
  <data name="FormulaColumns_ImplicitNumberToText" xml:space="preserve">
    <value>数値をテキストに変換するには Text 関数を使用します。書式を第 2 引数に定義しますが、3 桁区切りや小数点を式の列に含めることはできません。</value>
    
  </data>
  <data name="FormulaColumns_RelatedCurrency" xml:space="preserve">
    <value>関連するテーブルで通貨の列を計算することは、式の列では現在サポートされていません。</value>
    
  </data>
</root>