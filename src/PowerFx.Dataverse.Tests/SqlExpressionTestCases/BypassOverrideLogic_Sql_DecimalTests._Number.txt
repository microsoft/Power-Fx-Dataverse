
// Name of this file starts with "BypassOverrideLogic" meaning we will evaluate the real result returned by SQL
// This allows us to "see" when overflows occur and not ignore them

// NumberIsFloat is set to true

>> 1 = 1
true

>> 0 = 0
true

>> 1 = 0
false

//----
// 10 '9'x
>> 9999999999
9999999999

>> 9999999999 = 9999999999
true

>> 9999999999 = 9999999998
false

//----
// 11 '9'x
>> 99999999999
99999999999

>> 99999999999 = 99999999999
true

>> 99999999999 = 99999999998
false

//----
// 12 '9'x -- Will generate an "Overflow numeric literal" warning
>> 999999999999
Blank()

>> 999999999999 = 999999999999
Blank()

>> 99999999999 + 1
100000000000

>> 100000000000
100000000000

>> -100000000000
-100000000000

>> -100000000000 + 1
-99999999999

// Here we are beyond allowed limits for a DV "Decimal" (-100,000,000,000 ... 100,000,000,000 range)
>> 99999999999 + 2
Blank()

>> 99999999999 + 1.1
Blank()

>> 99999999999 + 1.000000001
Blank()

// 10 digits
>> 99999999999 + 1.0000000001
Blank()

// 11 digits
>> 99999999999 + 1.00000000001
100000000000

>> -99999999999 - 2
Blank()

>> -99999999999 - 1.1
Blank()

>> -99999999999 - 1.000000001
Blank()

// 10 digits
>> -99999999999 - 1.0000000001
Blank()

// 11 digits
>> -99999999999 - 1.00000000001
-100000000000

>> 99999999999 + 0.9
99999999999.9

>> 99999999999 + 0.99
99999999999.99

>> 99999999999 + 0.999
99999999999.999

>> 99999999999 + 0.9999
99999999999.9999

>> 99999999999 + 0.99999
99999999999.99999

>> 99999999999 + 0.999999
99999999999.999999

>> 99999999999 + 0.9999999
99999999999.9999999

>> 99999999999 + 0.99999999
99999999999.99999999

>> 99999999999 + 0.999999999
99999999999.999999999

>> 99999999999 + 0.9999999999
99999999999.9999999999

>> 99999999999 + 0.9999999997
99999999999.9999999997

// More than 10 digits
>> 99999999999 + 0.99999999974
99999999999.9999999997

>> 99999999999 + 0.99999999975
99999999999.9999999998

// Next two tests have the same expression but return different results (we add "+ 0" to make them distinct)
// At SQL level, we get "100000000000.0000000000" and this test works as we use PowerFx2SqlEngine.DefaultPrecision precision
>> 99999999999 + 0.99999999999 + 0
99999999999.99999999999

>> 99999999999 + 0.99999999999
100000000000

>> 99999999999 + 0.999999999999
100000000000

>> 99999999999 + 0.99999999999999999999999999999999999
100000000000

>> 99999999999 + 0.1234567899
99999999999.123456789

>> 99999999999 + 0.1234567899999
99999999999.123456789

>> 99999999999 + 0.123456789 + 0.876543210
99999999999.999999999

>> 99999999999 + 0.123456789 + 0.876543211
100000000000

>> 99999999999 + 0.123456789 + 0.876543212
Blank()

>> 99999999999 + 1.000000001 - 1.000000001
Blank()

>> 99999999999 + (1.000000001 - 1.000000001)
99999999999

>> 99999999999 - 1.000000001 + 1.000000001
99999999999

>> 99999999999 - (1.000000001 + 1.000000001)
99999999996.9999999998

>> 0.0000000001
0.000000001

>> 0.00000000001
0

>> 0.00000000001 * 10
0

>> 0.00000000001 * 99999999999
0

>> 1.414213562373 * 1.414213562373
1.99999999979
